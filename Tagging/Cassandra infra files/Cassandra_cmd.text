## Write Data

/opt/cassandra/tools/bin/cassandra-stress user n=10K profile=t1_tags.yaml "ops(t1.insert=1)" truncate=once -graph file=full_write_graph.html revision=1 -rate  threads=5 -log file=full_write.log -node cassandra

/opt/cassandra/tools/bin/cassandra-stress user n=10K profile=t1_tags.yaml "ops(t1.insert=1)" truncate=once -graph file=tags_write_graph.html title="NVO Cassandra POC TAG Table Write" -rate threads=5 -log file=tags_write.log


/opt/cassandra/tools/bin/cassandra-stress user n=10K profile=t1_tags.yaml,t2_entities.yaml,t3_tag_entities.yaml "ops(t1.insert=1,t2.insert=1,t3.insert=1)" truncate=once -graph file=full_write_graph.html title="NVO Cassandra POC" -rate  threads=5 -log file=full_write.log -node cassandra

/opt/cassandra/tools/bin/cassandra-stress user n=100K profile=t1_tags.yaml,t2_entities.yaml,t3_tag_entities.yaml "ops(t1.insert=1,t2.insert=1,t3.insert=1)" truncate=once -graph file=full_write_graph.html title="NVO Cassandra POC" revision="Second"  -rate threads=5 -log file=full_write.log

/opt/cassandra/tools/bin/cassandra-stress user n=1M profile=t1_tags.yaml,t2_entities.yaml,t3_tag_entities.yaml "ops(t1.insert=1,t2.insert=1,t3.insert=1)" truncate=once -graph file=full_write_graph.html title="NVO Cassandra POC" revision="third" -rate threads=5 -log file=full_write.log

/opt/cassandra/tools/bin/cassandra-stress user n=1M profile=t1_tags.yaml,t2_entities.yaml,t3_tag_entities.yaml "ops(t1.insert=1,t2.insert=1,t3.insert=1)" truncate=once -graph file=full_write_graph.html title="NVO Cassandra POC" revision="four" -rate threads=5 -log file=full_write.log


#### Read Data




##################
/opt/cassandra/tools/bin/cassandra-stress  write n=10 cl=ONE -node cassandra

/opt/cassandra/tools/bin/cassandra-stress user n=10K profile=t1_tags.yaml,t2_entities.yaml,t3_tag_entities.yaml "ops(t1.insert=1,t2.insert=1,t3.insert=1)" truncate=once -graph file=full_write_graph.html -rate revision=1 threads=10 -log file=full_write.log

docker exec -it cassandra-stress /opt/cassandra/tools/bin/cassandra-stress user profile=t1_tags.yaml,t2_entities.yaml,t3_tag_entities.yaml duration=1m "ops(t1.insert=1,t2.insert=1,t3.insert=1)" truncate=once -graph file=full_write_graph.html -rate threads=10 -log file=full_write.log

docker exec -it cassandra-stress

/opt/cassandra/tools/bin/cassandra-stress user profile=t1_tags.yaml,t2_entities.yaml,t3_tag_entities.yaml duration=1m "ops(t1.insert=1,t2.insert=1,t3.insert=1)" truncate=once -graph file=full_write_graph.html -rate threads=10 -log file=full_write.log

/opt/cassandra/tools/bin/cassandra-stress user profile=t1_tags.yaml,t2_entities.yaml,t3_tag_entities.yaml duration=1m "ops(t1.select_tag_by_id=1,t2.select_entity_by_id=1,t3.select_entities_by_tag=1)" truncate=once -graph file=full_read_graph.html -rate threads=10 -log file=full_reads.log


#### Cassandra Stress and Cassandra into seperate container
version: '3'

services:
  cassandra-stress:
    image: cassandra
    container_name: cassandra-stress
    ports:
      - "9043:9042"  # Exposing Cassandra stress port
    networks:
      - cassandra-net
    environment:
      - CASSANDRA_SEEDS=cassandra  # Assuming it should connect to the main Cassandra node
    volumes:
      - /home/user/go/src/GO_Projects/Tagging/Results:/opt/cassandra/Results

  cassandra:
    image: cassandra
    container_name: cassandra
    ports:
      - "9042:9042"  # Exposing Cassandra port
    networks:
      - cassandra-net
    environment:
      - CASSANDRA_SEEDS=cassandra-stress  # Using cassandra-stress as seed node
    volumes:
      - /home/user/go/src/GO_Projects/Tagging/Results:/opt/cassandra/Results
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G

networks:
  cassandra-net:
    driver: bridge



docker exec cassandra-1 nodetool status
docker exec -it cassandra-1 cqlsh

docker exec -it cassandra-1 /opt/cassandra/tools/bin/cassandra-stress user profile=t1_tags.yaml,t2_entities.yaml,t3_tag_entities.yaml duration=1m "ops(t1.insert=1,t2.insert=1,t3.insert=1)" truncate=once -graph file=full_write_graph.html -rate threads=10 -log file=full_write.log

### Multiple Docker Container with Brige / Localhost

version: '3'

services:
  cassandra-1:
    image: cassandra
    container_name: cassandra-1
    ports:
      - "9042:9042"
    networks:
      - cassandra-net
    environment:
      - CASSANDRA_SEEDS=cassandra-1

  cassandra-2:
    image: cassandra
    container_name: cassandra-2
    ports:
      - "9043:9042"
    networks:
      - cassandra-net
    environment:
      - CASSANDRA_SEEDS=cassandra-1

  cassandra-3:
    image: cassandra
    container_name: cassandra-3
    ports:
      - "9044:9042"
    networks:
      - cassandra-net
    environment:
      - CASSANDRA_SEEDS=cassandra-1,cassandra-2

networks:
  cassandra-net:
    driver: bridge


### Multiple Docker Container with port forwards


// 3 node Cassandra setup listening on ports 9042, 9043, and 9044 for client requests

// Run the first node
docker run --name cassandra-1 -p 9042:9042 -d cassandra
INSTANCE1=$(docker inspect --format="{{ .NetworkSettings.IPAddress }}" cassandra-1)
echo "INSTANCE1: ${INSTANCE1}"

// Run the second node
docker run --name cassandra-2 -p 9043:9042 -d -e CASSANDRA_SEEDS=$INSTANCE1 cassandra
INSTANCE2=$(docker inspect --format="{{ .NetworkSettings.IPAddress }}" cassandra-2)
echo "INSTANCE2: ${INSTANCE2}"

// Run the third node
docker run --name cassandra-3 -p 9044:9042 -d -e CASSANDRA_SEEDS=$INSTANCE1,$INSTANCE2 cassandra
INSTANCE3=$(docker inspect --format="{{ .NetworkSettings.IPAddress }}" cassandra-3)
echo "INSTANCE3: ${INSTANCE3}"

// Check Status of Nodes
docker exec cassandra-3 nodetool status

// Start cqlsh shell
docker exec -it cassandra-1 cqlsh

// Create a keyspace with replication factor of 3 using NetworkTopologyStrategy
CREATE KEYSPACE cassandra_gokcedb
  WITH REPLICATION = {
   'class' : 'NetworkTopologyStrategy',
   'datacenter1' : 3
  };

// Show all existing keyspaces
DESCRIBE keyspaces;



### Running on Single Docker Container

docker run --name cassandra-1 -p 9042:9042 -d cassandra
docker cp ./Results/ d96cc53952c3:/opt/cassandra
docker exec -it d96cc53952c3 /bin/sh

/opt/cassandra/tools/bin/cassandra-stress user profile=t1_tags.yaml,t2_entities.yaml,t3_tag_entities.yaml duration=1m "ops(t1.insert=1,t2.insert=1,t3.insert=1)" truncate=once -graph file=full_write_graph.html -rate threads=10 -log file=full_write.log

/opt/cassandra/tools/bin/cassandra-stress user profile=t1_tags.yaml,t2_entities.yaml,t3_tag_entities.yaml duration=1m "ops(t1.select_tag_by_id=1,t2.select_entity_by_id=1,t3.select_entities_by_tag=1)" truncate=once -graph file=full_read_graph.html -rate threads=10 -log file=full_reads.log

####


~/Downloads/apache-cassandra-4.0.13/tools/bin/cassandra-stress user profile=t1_tags.yaml,t2_entities.yaml,t3_tag_entities.yaml duration=1m "ops(t1.insert=1,t2.insert=1,t3.insert=1)" truncate=once -graph file=full_write_graph.html -rate threads=10 -log file=full_write.log

~/Downloads/apache-cassandra-4.0.13/tools/bin/cassandra-stress user profile=t1_tags.yaml,t2_entities.yaml,t3_tag_entities.yaml duration=1m "ops(t1.select_tag_by_id=1,t2.select_entity_by_id=1,t3.select_entities_by_tag=1)" truncate=once -graph file=full_read_graph.html -rate threads=10 -log file=full_reads.log


############### Tags #########
~/Downloads/apache-cassandra-4.0.13/tools/bin/cassandra-stress user profile=./Tags.yaml  duration=1m "ops(insert=1)" truncate=once -graph file=Tags_write.html -rate threads=10 -log file=Tags.log

~/Downloads/apache-cassandra-4.0.13/tools/bin/cassandra-stress user profile=./Tags.yaml  duration=1m "ops(select_tag_by_id=1)" -graph file=Tags_read.html -rate threads=10 -log file=Tags_read.log

######### Entity #########

~/Downloads/apache-cassandra-4.0.13/tools/bin/cassandra-stress user profile=./entities.yaml  duration=1m "ops(insert=1)" truncate=once -graph file=entities_writ.html -rate threads=10 -log file=entities_write.log

~/Downloads/apache-cassandra-4.0.13/tools/bin/cassandra-stress user profile=./entities.yaml  duration=1m "ops(select_entity_by_id=1)"  -graph file=entities_read.html -rate threads=10 -log file=entities_read.log

############ Full #########

~/Downloads/apache-cassandra-4.0.13/tools/bin/cassandra-stress user profile=./all_profile.yaml  duration=1m "ops(insert=1)" truncate=once -graph file=all_profile_write.html -rate threads=10 -log file=all_profile_write.log

~/Downloads/apache-cassandra-4.0.13/tools/bin/cassandra-stress user profile=./all_profile.yaml  duration=1m "ops(select_entities_by_tag=1)" -graph file=all_profile_read.html -rate threads=10 -log file=all_profile_read.log


####################################
~/Downloads/apache-cassandra-4.0.13/tools/bin/cassandra-stress user profile=./all_profile.yaml  duration=1m "ops(insert=1)" truncate=always -graph file=all_profile_write.html -rate threads=10 -log file=all_profile_write.log

~/Downloads/apache-cassandra-4.0.13/tools/bin/cassandra-stress user profile=./all_profile.yaml  duration=1m "ops(insert=1)" truncate=always -graph file=all_profile_write.html -rate threads=10 -log file=all_profile_write.log

~/Downloads/apache-cassandra-4.0.13/tools/bin/cassandra-stress user profile=./all_profile.yaml  duration=1m "ops(insert=1)" truncate=always -graph file=all_profile_write.html -rate threads=10 -log file=all_profile_write.log

~/Downloads/apache-cassandra-4.0.13/tools/bin/cassandra-stress user profile=./full_profile.yaml  duration=1m "ops(insert=1)" truncate=always -graph file=full_profile_write.html -rate threads=10 -log file=full_profile_write.log

~/Downloads/apache-cassandra-4.0.13/tools/bin/cassandra-stress user profile=./full_profile.yaml  duration=1m "ops(select_tag_by_id=1, select_entity_by_id=1, select_entities_by_tag=1)"  -graph file=full_profile_read.html -rate threads=10 -log file=full_profile_read.log

sudo ~/Downloads/apache-cassandra-4.0.13/tools/bin/cassandra-stress user profile=./only_tags.yaml  duration=1m "ops(select_tag_by_id=1)" -graph=test.html -rate thread=10

describe keyspaces;
describe tables;

~/Downloads/apache-cassandra-4.0.13/tools/bin/cassandra-stress user write n=1000000  profile=./full_profile.yaml  duration=1m "ops(insert=1)" truncate=once
~/Downloads/apache-cassandra-4.0.13/tools/bin/cassandra-stress write n=1000000  profile=./full_profile.yaml  duration=1m "ops(insert=1)" truncate=once
~/Downloads/apache-cassandra-4.0.13/tools/bin/cassandra-stress user profile=./full_profile.yaml  duration=1m "ops(insert=1)" truncate=once

cassandra-stress write duration=1m cl=LOCAL_QUORUM -schema file=path_to_your_yaml_file.yaml -rate threads=10
cassandra-stress read duration=1m cl=LOCAL_QUORUM -schema file=path_to_your_yaml_file.yaml -rate threads=10

~/Downloads/apache-cassandra-4.0.13/tools/bin/cassandra-stress write duration=1m cl=LOCAL_QUORUM -schema file=full_profile.yaml -rate threads=10
~/Downloads/apache-cassandra-4.0.13/tools/bin/cassandra-stress read duration=1m cl=LOCAL_QUORUM -schema file=full_profile.yaml -rate threads=10

cassandra-stress write n=1000000 cl=QUORUM -schema "keyspace='your_keyspace_name' table='tags' replication(strategy=SimpleStrategy, factor=1)"
cassandra-stress read n=500000 cl=ONE -schema "keyspace='your_keyspace_name' table='tags' replication(strategy=SimpleStrategy, factor=1)"
cassandra-stress mixed ratio(write=1, read=3) n=500000 cl=ONE -schema "keyspace='your_keyspace_name' table='tags' replication(strategy=SimpleStrategy, factor=1)"


CREATE KEYSPACE tagging WITH REPLICATION = { 'class' : 'SimpleStrategy', 'replication_factor' : 1 };

USE tagging;

CREATE TABLE entities (
    id UUID PRIMARY KEY,
    name TEXT,
    type TEXT,
    metadata TEXT
);

use tagging;
select * from entities;

select count(*) from entities;
truncate entities;


truncate entities;
drop table entities;
drop table tags;
drop table tag_entities;
drop keyspace tagging;
describe keyspace tagging;

CREATE TABLE tags (
    id UUID PRIMARY KEY,  // Index for storing tags
    owner_id INT,  // XIQ Owner ID
    name TEXT,  // Name of the Tag
    description TEXT,  // Description of the Tag
    properties TEXT  // Properties of the Tag
);

CREATE TABLE entities (
    id UUID PRIMARY KEY,  // ID Key
    name TEXT,  // Name of the Entity
    type TEXT,  // Type of the Entity
    metadata TEXT  // JSON representation of data
);

CREATE TABLE tag_entities (
    tag_id UUID,  // Foreign key to tags.id
    entity_id UUID,  // Foreign key to entities.id
    PRIMARY KEY (tag_id, entity_id)
);

## Queries 

INSERT INTO tags (id, owner_id, name, description, properties) 
VALUES (uuid(), 12345, 'Sample Tag', 'This is a sample tag description', '{"key1":"value1","key2":"value2"}');

DELETE FROM tags WHERE id = <tag_id>;

INSERT INTO entities (id, name, type, metadata) 
VALUES (uuid(), 'Sample Entity', 'Type A', '{"key1":"value1","key2":"value2"}');

INSERT INTO entities (id, name, type, metadata) 
VALUES (uuid(), 'Sample Entity', 'Type A', '{"key1":"value1","key2":"value2"}');

DELETE FROM entities WHERE id = <entity_id>;

SELECT * FROM tags WHERE id = <tag_id>;

SELECT * FROM tags;

~/Downloads/apache-cassandra-4.0.13/tools/bin/cassandra-stress user profile=./simple_stress_test.yaml  duration=1m "ops(insert=1,latest_event=1,events=1)" truncate=once
~/Downloads/apache-cassandra-4.0.13/tools/bin/cassandra-stress user profile=./simple_stress_test.yaml  duration=1m "ops(insert=1)" truncate=once
